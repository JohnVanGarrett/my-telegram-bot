import os
import time
import datetime
import logging
from openpyxl import Workbook, load_workbook
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ChatMemberHandler,
    ContextTypes,
)

# ====== 1. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ß–ê–°–û–í–û–ô –ü–û–Ø–° –ú–°–ö ======
os.environ['TZ'] = 'Europe/Moscow'
time.tzset()

# ====== 2. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)

# ====== 3. –ü–£–¢–¨ –ö EXCEL‚Äë–§–ê–ô–õ–£ ======
XLSX_FILE = 'visitors.xlsx'

def init_excel():
    if not os.path.exists(XLSX_FILE):
        wb = Workbook()
        ws = wb.active
        ws.append([
            'timestamp',
            'user_id',
            'username',
            'action',
            'clicked_subscribed',
            'blocked_bot',
            'duration_seconds'
        ])
        wb.save(XLSX_FILE)

def log_to_excel(timestamp, user_id, username, action, clicked_sub, blocked_bot, duration):
    wb = load_workbook(XLSX_FILE)
    ws = wb.active
    ws.append([timestamp, user_id, username, action, clicked_sub, blocked_bot, duration])
    wb.save(XLSX_FILE)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Excel‚Äë—Ñ–∞–π–ª
init_excel()

# ====== –ö–û–ù–§–ò–ì –ë–û–¢–ê ======
TOKEN       = os.environ['TOKEN']
CHANNEL     = "@photo_therapy_art"
ARTICLE_URL = "https://taplink.cc/yapropala"

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç üòç\n"
    "–†–∞–¥ —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å!\n\n"
    "–í—Å—ë, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å ‚Äì –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª:\n"
    "https://t.me/photo_therapy_art\n"
    "https://t.me/photo_therapy_art\n"
    "https://t.me/photo_therapy_art\n\n"
    "–ê –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–º–∏ ¬´–Ø¬†–£–ñ–ï¬†–ü–û–î–ü–ò–°–ê–ù(–ê)¬ª,\n"
    "–∏ —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Å—Ç–∞—Ç—å—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–∫—Ä–æ—é –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç ‚Äî\n"
    "–ø–æ—á–µ–º—É —Ç—ã —Ç–µ—Ä—è–µ—à—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π."
)

MSG_OK = (
    "–°—É–ø–µ—Ä! –í–∏–∂—É —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É üòÉ\n\n"
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç—å—è,–ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n\n"
    f"{ARTICLE_URL}\n"
    f"{ARTICLE_URL}\n"
    f"{ARTICLE_URL}\n\n"
    "\n–û–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –Ω–∞ —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π. –ü–ï–†–ï–•–û–î–ò –ò –ß–ò–¢–ê–ô!"
)

MSG_FAIL = (
    "–•–º–º‚Ä¶\n"
    "–ù–µ –≤–∏–∂—É —Ç–µ–±—è —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
    "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –∂–º–∏ ¬´–Ø¬†–£–ñ–ï¬†–ü–û–î–ü–ò–°–ê–ù(–ê)¬ª –µ—â—ë —Ä–∞–∑:\n"
    "https://t.me/photo_therapy_art\n"
    "https://t.me/photo_therapy_art\n"
    "https://t.me/photo_therapy_art"
)

def now_moscow():
    return (datetime.datetime.utcnow() + datetime.timedelta(hours=3))\
           .isoformat(sep=' ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid  = user.id
    uname = user.username or str(uid)
    ts = now_moscow()

    logging.info(f"/start by user_id={uid} username={uname}")
    log_to_excel(ts, uid, uname, 'start', False, False, 0)

    kb = [[InlineKeyboardButton("–Ø¬†–£–ñ–ï¬†–ü–û–î–ü–ò–°–ê–ù(–ê)", callback_data="check_sub")]]
    await update.message.reply_text(WELCOME_TEXT, reply_markup=InlineKeyboardMarkup(kb))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è ¬´–Ø¬†–£–ñ–ï¬†–ü–û–î–ü–ò–°–ê–ù(–ê)¬ª
async def check_subscribed(update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user = update.callback_query.from_user
    uid  = user.id
    uname = user.username or str(uid)
    ts = now_moscow()

    logging.info(f"check_sub by user_id={uid} username={uname}")
    log_to_excel(ts, uid, uname, 'check_sub', True, False, 0)

    try:
        member = await context.bot.get_chat_member(CHANNEL, uid)
        status = member.status
    except Exception as e:
        logging.error(f"Subscription check error for {uid}: {e}")
        await update.callback_query.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞."
        )
        return

    if status in ("creator", "administrator", "member"):
        await update.callback_query.message.reply_text(MSG_OK)
    else:
        await update.callback_query.message.reply_text(MSG_FAIL)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞
async def my_chat_member(update, context: ContextTypes.DEFAULT_TYPE):
    cm = update.my_chat_member
    chat = cm.chat
    uid  = chat.id
    uname = chat.username or str(uid)
    new_status = cm.new_chat_member.status
    blocked = new_status in ('kicked', 'left')
    ts = now_moscow()

    logging.info(f"ChatMember update for user_id={uid}: new_status={new_status}")
    log_to_excel(ts, uid, uname, f"chat_member_{new_status}", False, blocked, 0)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_subscribed, pattern="^check_sub$"))
    app.add_handler(ChatMemberHandler(my_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))
    app.run_polling()

if __name__ == "__main__":
    main()
